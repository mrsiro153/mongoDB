/*
 * This file is generated by jOOQ.
*/
package mongoDB.model.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import mongoDB.model.Keys;
import mongoDB.model.Transaction;
import mongoDB.model.tables.records.TransactionruleRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactionrule extends TableImpl<TransactionruleRecord> {

    private static final long serialVersionUID = 485869468;

    /**
     * The reference instance of <code>transaction.transactionRule</code>
     */
    public static final Transactionrule TRANSACTIONRULE = new Transactionrule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionruleRecord> getRecordType() {
        return TransactionruleRecord.class;
    }

    /**
     * The column <code>transaction.transactionRule.id</code>.
     */
    public final TableField<TransactionruleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>transaction.transactionRule.maxTimePerDay</code>.
     */
    public final TableField<TransactionruleRecord, Integer> MAXTIMEPERDAY = createField("maxTimePerDay", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.transactionRule.maxPerDay</code>.
     */
    public final TableField<TransactionruleRecord, BigDecimal> MAXPERDAY = createField("maxPerDay", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * The column <code>transaction.transactionRule.maxPerTxn</code>.
     */
    public final TableField<TransactionruleRecord, BigDecimal> MAXPERTXN = createField("maxPerTxn", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * The column <code>transaction.transactionRule.minPerTxn</code>.
     */
    public final TableField<TransactionruleRecord, BigDecimal> MINPERTXN = createField("minPerTxn", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * Create a <code>transaction.transactionRule</code> table reference
     */
    public Transactionrule() {
        this("transactionRule", null);
    }

    /**
     * Create an aliased <code>transaction.transactionRule</code> table reference
     */
    public Transactionrule(String alias) {
        this(alias, TRANSACTIONRULE);
    }

    private Transactionrule(String alias, Table<TransactionruleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactionrule(String alias, Table<TransactionruleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransactionruleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRANSACTIONRULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionruleRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTIONRULE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionruleRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionruleRecord>>asList(Keys.KEY_TRANSACTIONRULE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactionrule as(String alias) {
        return new Transactionrule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactionrule rename(String name) {
        return new Transactionrule(name, null);
    }
}
