/*
 * This file is generated by jOOQ.
*/
package mongoDB.model.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import mongoDB.model.Keys;
import mongoDB.model.Transaction;
import mongoDB.model.tables.records.DdtransactionRecord;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ddtransaction extends TableImpl<DdtransactionRecord> {

    private static final long serialVersionUID = 517823346;

    /**
     * The reference instance of <code>transaction.ddTransaction</code>
     */
    public static final Ddtransaction DDTRANSACTION = new Ddtransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DdtransactionRecord> getRecordType() {
        return DdtransactionRecord.class;
    }

    /**
     * The column <code>transaction.ddTransaction.transactionNumber</code>.
     */
    public final TableField<DdtransactionRecord, String> TRANSACTIONNUMBER = createField("transactionNumber", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.accountNumber</code>.
     */
    public final TableField<DdtransactionRecord, String> ACCOUNTNUMBER = createField("accountNumber", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.amount</code>.
     */
    public final TableField<DdtransactionRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.type</code>.
     */
    public final TableField<DdtransactionRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CHAR.length(2).nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.createdDate</code>.
     */
    public final TableField<DdtransactionRecord, Date> CREATEDDATE = createField("createdDate", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.status</code>.
     */
    public final TableField<DdtransactionRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.isDelete</code>.
     */
    public final TableField<DdtransactionRecord, Byte> ISDELETE = createField("isDelete", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>transaction.ddTransaction.createdAt</code>.
     */
    public final TableField<DdtransactionRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>transaction.ddTransaction.modifiedAt</code>.
     */
    public final TableField<DdtransactionRecord, Timestamp> MODIFIEDAT = createField("modifiedAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>transaction.ddTransaction</code> table reference
     */
    public Ddtransaction() {
        this("ddTransaction", null);
    }

    /**
     * Create an aliased <code>transaction.ddTransaction</code> table reference
     */
    public Ddtransaction(String alias) {
        this(alias, DDTRANSACTION);
    }

    private Ddtransaction(String alias, Table<DdtransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ddtransaction(String alias, Table<DdtransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DdtransactionRecord> getPrimaryKey() {
        return Keys.KEY_DDTRANSACTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DdtransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<DdtransactionRecord>>asList(Keys.KEY_DDTRANSACTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ddtransaction as(String alias) {
        return new Ddtransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ddtransaction rename(String name) {
        return new Ddtransaction(name, null);
    }
}
