/*
 * This file is generated by jOOQ.
*/
package mongoDB.model.tables;


import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import mongoDB.model.Keys;
import mongoDB.model.Transaction;
import mongoDB.model.tables.records.ProductsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = -219290093;

    /**
     * The reference instance of <code>transaction.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>transaction.products.id</code>.
     */
    public final TableField<ProductsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>transaction.products.productNameVn</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTNAMEVN = createField("productNameVn", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.products.productNameEn</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTNAMEEN = createField("productNameEn", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.products.icon</code>.
     */
    public final TableField<ProductsRecord, Integer> ICON = createField("icon", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.descriptionVn</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTIONVN = createField("descriptionVn", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>transaction.products.descriptionEn</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTIONEN = createField("descriptionEn", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>transaction.products.minAmount</code>.
     */
    public final TableField<ProductsRecord, BigInteger> MINAMOUNT = createField("minAmount", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20), this, "");

    /**
     * The column <code>transaction.products.maxAmount</code>.
     */
    public final TableField<ProductsRecord, BigInteger> MAXAMOUNT = createField("maxAmount", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20), this, "");

    /**
     * The column <code>transaction.products.minPeriod</code>.
     */
    public final TableField<ProductsRecord, Integer> MINPERIOD = createField("minPeriod", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.maxPeriod</code>.
     */
    public final TableField<ProductsRecord, Integer> MAXPERIOD = createField("maxPeriod", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.serviceId</code>.
     */
    public final TableField<ProductsRecord, Integer> SERVICEID = createField("serviceId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.customerType</code>.
     */
    public final TableField<ProductsRecord, Integer> CUSTOMERTYPE = createField("customerType", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.provisoId</code>.
     */
    public final TableField<ProductsRecord, Integer> PROVISOID = createField("provisoId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.amountUnit</code>.
     */
    public final TableField<ProductsRecord, Long> AMOUNTUNIT = createField("amountUnit", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.products.status</code>.
     */
    public final TableField<ProductsRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.products.createdAt</code>.
     */
    public final TableField<ProductsRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>transaction.products.modifiedAt</code>.
     */
    public final TableField<ProductsRecord, Timestamp> MODIFIEDAT = createField("modifiedAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>transaction.products</code> table reference
     */
    public Products() {
        this("products", null);
    }

    /**
     * Create an aliased <code>transaction.products</code> table reference
     */
    public Products(String alias) {
        this(alias, PRODUCTS);
    }

    private Products(String alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(String alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.KEY_PRODUCTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Products as(String alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(name, null);
    }
}
