/*
 * This file is generated by jOOQ.
*/
package mongoDB.model.tables;


import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import mongoDB.model.Keys;
import mongoDB.model.Transaction;
import mongoDB.model.tables.records.ProducttypeRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Producttype extends TableImpl<ProducttypeRecord> {

    private static final long serialVersionUID = 2060218226;

    /**
     * The reference instance of <code>transaction.productType</code>
     */
    public static final Producttype PRODUCTTYPE = new Producttype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProducttypeRecord> getRecordType() {
        return ProducttypeRecord.class;
    }

    /**
     * The column <code>transaction.productType.productTypeId</code>.
     */
    public final TableField<ProducttypeRecord, Integer> PRODUCTTYPEID = createField("productTypeId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>transaction.productType.productID</code>.
     */
    public final TableField<ProducttypeRecord, Integer> PRODUCTID = createField("productID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.productType.maxAmount</code>.
     */
    public final TableField<ProducttypeRecord, BigInteger> MAXAMOUNT = createField("maxAmount", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20), this, "");

    /**
     * The column <code>transaction.productType.minAmount</code>.
     */
    public final TableField<ProducttypeRecord, BigInteger> MINAMOUNT = createField("minAmount", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20), this, "");

    /**
     * The column <code>transaction.productType.fromDate</code>.
     */
    public final TableField<ProducttypeRecord, Long> FROMDATE = createField("fromDate", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.productType.toDate</code>.
     */
    public final TableField<ProducttypeRecord, Long> TODATE = createField("toDate", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.productType.description</code>.
     */
    public final TableField<ProducttypeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.productType.interest</code>.
     */
    public final TableField<ProducttypeRecord, Double> INTEREST = createField("interest", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>transaction.productType.period</code>.
     */
    public final TableField<ProducttypeRecord, Integer> PERIOD = createField("period", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.productType.status</code>.
     */
    public final TableField<ProducttypeRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transaction.productType.createdAt</code>.
     */
    public final TableField<ProducttypeRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>transaction.productType.modifiedAt</code>.
     */
    public final TableField<ProducttypeRecord, Timestamp> MODIFIEDAT = createField("modifiedAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>transaction.productType</code> table reference
     */
    public Producttype() {
        this("productType", null);
    }

    /**
     * Create an aliased <code>transaction.productType</code> table reference
     */
    public Producttype(String alias) {
        this(alias, PRODUCTTYPE);
    }

    private Producttype(String alias, Table<ProducttypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Producttype(String alias, Table<ProducttypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProducttypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProducttypeRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTTYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProducttypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ProducttypeRecord>>asList(Keys.KEY_PRODUCTTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Producttype as(String alias) {
        return new Producttype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Producttype rename(String name) {
        return new Producttype(name, null);
    }
}
