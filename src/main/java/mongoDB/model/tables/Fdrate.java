/*
 * This file is generated by jOOQ.
*/
package mongoDB.model.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import mongoDB.model.Transaction;
import mongoDB.model.tables.records.FdrateRecord;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fdrate extends TableImpl<FdrateRecord> {

    private static final long serialVersionUID = 414981242;

    /**
     * The reference instance of <code>transaction.fdRate</code>
     */
    public static final Fdrate FDRATE = new Fdrate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FdrateRecord> getRecordType() {
        return FdrateRecord.class;
    }

    /**
     * The column <code>transaction.fdRate.fdType</code>.
     */
    public final TableField<FdrateRecord, String> FDTYPE = createField("fdType", org.jooq.impl.SQLDataType.VARCHAR.length(11), this, "");

    /**
     * The column <code>transaction.fdRate.intRate</code>.
     */
    public final TableField<FdrateRecord, BigDecimal> INTRATE = createField("intRate", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * The column <code>transaction.fdRate.fromAmount</code>.
     */
    public final TableField<FdrateRecord, BigDecimal> FROMAMOUNT = createField("fromAmount", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * The column <code>transaction.fdRate.toAmount</code>.
     */
    public final TableField<FdrateRecord, BigDecimal> TOAMOUNT = createField("toAmount", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2), this, "");

    /**
     * Create a <code>transaction.fdRate</code> table reference
     */
    public Fdrate() {
        this("fdRate", null);
    }

    /**
     * Create an aliased <code>transaction.fdRate</code> table reference
     */
    public Fdrate(String alias) {
        this(alias, FDRATE);
    }

    private Fdrate(String alias, Table<FdrateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fdrate(String alias, Table<FdrateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fdrate as(String alias) {
        return new Fdrate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fdrate rename(String name) {
        return new Fdrate(name, null);
    }
}
